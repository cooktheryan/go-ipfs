name: build image 
on: 
  push:
    branches: ["master", "release*"]
    tags: ["*"]
  pull_request:
    branches: ["master", "release*"]

env:
  GO_VERSION: "1.17"
  GO_IPFS_VERSION: v0.12.2


jobs:
  go-ipfs:
    name: build go-ipfs image
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: podman build
      run: |
        podman build -t ${{ env.GO_IPFS_IMAGE }}:${{ env.GO_IPFS_VERSION }} .

    - name: save the image
      run: podman save -o /tmp/go-ipfs.tar ${{ env.GO_IPFS_IMAGE }}:${{ env.GO_IPFS_VERSION }}

    - name: archive the image
      uses: actions/upload-artifact@v1
      with:
        name: go-ipfs
        path: /tmp/go-ipfs.tar

  push-ipfs:
    name: Push ipfs container to registry
    needs: go-ipfs 
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: go-ipfs
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/go-ipfs.tar
          docker inspect ${GO_IPFS_IMAGE}:${GO_IPFS_VERSION}
          
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${BUNDLE_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
          
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          echo "Pushing to ${GO_IPFS_IMAGE}:${{ env.GO_IPFS_VERSION }}"
          docker push "${GO_IPFS_IMAGE}:${{ env.GO_IPFS_VERSION }}"
